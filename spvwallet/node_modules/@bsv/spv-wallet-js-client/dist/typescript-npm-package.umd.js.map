{"version":3,"file":"typescript-npm-package.umd.js","sources":["../src/errors.ts","../src/utils/index.ts","../src/utils/keys.ts","../src/logger.ts","../src/utils/sign.ts","../src/authentication.ts","../src/httpclient.ts","../src/totp/pike-totp.ts","../src/client.ts"],"sourcesContent":["export class SpvWalletError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = this.constructor.name;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nexport class ErrorInvalidOptions extends SpvWalletError {\n    constructor(logger, options) {\n        super('Invalid options. None of xPub, xPriv, accessKey nor adminKey is set');\n        logger.debug('Invalid options: ', options);\n    }\n}\nexport class ErrorNoXPrivToSignTransaction extends SpvWalletError {\n    constructor() {\n        super('Cannot sign transaction without an xPriv');\n    }\n}\nexport class ErrorClientInitNoXpriv extends SpvWalletError {\n    constructor() {\n        super('Init client with xPriv first');\n    }\n}\nexport class ErrorTxIdsDontMatchToDraft extends SpvWalletError {\n    constructor(logger, input, index, draftInput) {\n        super('Input tx ids do not match in draft and transaction hex');\n        logger.debug('The input: ', input, 'Tx index: ', index, 'The draft', draftInput);\n        this.input = input;\n        this.draftInput = draftInput;\n    }\n}\nexport class ErrorNoAdminKey extends SpvWalletError {\n    constructor() {\n        super('Admin key has not been set. Cannot do admin queries.');\n    }\n}\nexport class ErrorResponse extends SpvWalletError {\n    constructor(logger, response, content) {\n        super('Received error response');\n        logger.debug('StatusCode:', response.status, 'Error response:', response, 'The content:', content);\n        this.response = response;\n        this.content = content;\n    }\n}\nexport class ErrorWrongHex extends SpvWalletError {\n    constructor(wrongHex) {\n        super('Provided hexHash is not a valid hex string');\n        this.value = wrongHex;\n    }\n}\nexport class ErrorNoXPrivToGenerateTOTP extends SpvWalletError {\n    constructor() {\n        super('Cannot generate TOTP without an xPrivKey set');\n    }\n}\nexport class ErrorNoXPrivToValidateTOTP extends SpvWalletError {\n    constructor() {\n        super('Cannot validate TOTP without an xPrivKey set');\n    }\n}\nexport class ErrorWrongTOTP extends SpvWalletError {\n    constructor() {\n        super('TOTP is invalid');\n    }\n}\n","import { ErrorWrongHex } from '../errors';\nimport { Hash, Random, Utils } from '@bsv/sdk';\nconst maxInt32 = 2147483648 - 1; // 0x80000000\n// RandomHex returns a random hex string and error\nexport const RandomHex = function (n) {\n    return Utils.toHex(Random(n));\n};\n// ToHash returns a sha256 hash of the string\nexport const ToHash = function (string) {\n    const sha256 = Hash.sha256(string);\n    return Utils.toHex(sha256);\n};\n// isHex returns whether the given hex string a valid hex string is\nexport const isHex = function (hexString) {\n    return !!hexString.match(/^[0-9a-f]*$/i);\n};\n// getChildNumsFromHex get an array of numbers from the hex string\nexport const getChildNumsFromHex = function (hexHash) {\n    if (!isHex(hexHash)) {\n        throw new ErrorWrongHex(hexHash);\n    }\n    const strLen = hexHash.length;\n    const size = 8;\n    const splitLength = Math.ceil(strLen / size);\n    const childNums = [];\n    for (let i = 0; i < splitLength; i++) {\n        const start = i * size;\n        let stop = start + size;\n        if (stop > strLen) {\n            stop = strLen;\n        }\n        let num = Number('0x' + hexHash.substring(start, stop));\n        if (num > maxInt32) {\n            num = num - maxInt32;\n        }\n        childNums.push(num);\n    }\n    return childNums;\n};\n","import { getChildNumsFromHex } from './index';\nimport { HD, Mnemonic } from '@bsv/sdk';\n// deriveChildKeyFromHex derive the child extended key from the hex string\nexport const deriveChildKeyFromHex = function (hdKey, hexHash) {\n    return deriveHDChildKeyFromHex(hdKey, hexHash);\n};\nexport const deriveHDChildKeyFromHex = function (hdKey, hexHash) {\n    let childKey = hdKey;\n    const childNums = getChildNumsFromHex(hexHash);\n    childNums.forEach((childNum) => {\n        childKey = childKey.deriveChild(childNum);\n    });\n    return childKey;\n};\nexport const generateKeys = function () {\n    const mnemonic = Mnemonic.fromRandom();\n    return getKeysFromMnemonic(mnemonic.toString());\n};\nexport const getKeysFromMnemonic = function (mnemonicStr) {\n    const mnemonic = Mnemonic.fromString(mnemonicStr);\n    const seed = mnemonic.toSeed();\n    const hdWallet = new HD().fromSeed(seed);\n    return {\n        xPriv: () => hdWallet.toString(),\n        mnemonic: mnemonic.toString(),\n        xPub: {\n            toString() {\n                return hdWallet.toPublic().toString();\n            },\n        },\n    };\n};\nexport const getKeysFromString = function (privateKey) {\n    let hdWallet = new HD().fromString(privateKey);\n    return {\n        xPriv: () => hdWallet.privKey.toString(),\n        xPub: {\n            toString() {\n                return hdWallet.toPublic().toString();\n            },\n        },\n    };\n};\n","const isLogger = (loggerConfig) => {\n    const logger = loggerConfig;\n    return (typeof logger.debug === 'function' &&\n        typeof logger.info === 'function' &&\n        typeof logger.warn === 'function' &&\n        typeof logger.error === 'function');\n};\nconst nop = () => { };\nexport const defaultLogger = { level: 'info' };\nconst levelToNumber = (level) => {\n    switch (level) {\n        case 'debug':\n            return 1;\n        case 'info':\n            return 2;\n        case 'warn':\n            return 3;\n        case 'error':\n            return 4;\n        case 'disabled':\n            return 5;\n        default:\n            return 2;\n    }\n};\nexport const makeLogger = (loggerConfig) => {\n    if (isLogger(loggerConfig)) {\n        return loggerConfig;\n    }\n    else {\n        const { level } = loggerConfig;\n        const levelAsNumber = levelToNumber(level);\n        return {\n            debug: levelAsNumber <= 1 ? console.debug : nop,\n            info: levelAsNumber <= 2 ? console.info : nop,\n            warn: levelAsNumber <= 3 ? console.warn : nop,\n            error: levelAsNumber <= 4 ? console.error : nop,\n        };\n    }\n};\n","import { BSM, BigNumber, ECDSA, Utils } from '@bsv/sdk';\nexport const signMessage = function (message, privateKey) {\n    const messageBuf = Utils.toArray(message);\n    const hash = BSM.magicHash(messageBuf);\n    const bnh = new BigNumber(hash);\n    const signature = ECDSA.sign(bnh, privateKey, true);\n    const recovery = signature.CalculateRecoveryFactor(privateKey.toPublicKey(), bnh);\n    return signature.toCompact(recovery, true, 'base64');\n};\n","import { HD } from '@bsv/sdk';\nimport { RandomHex, ToHash } from './utils';\nimport { deriveHDChildKeyFromHex } from './utils/keys';\nimport { signMessage } from './utils/sign';\n// AuthHeader is the header to use for authentication (raw xPub)\nexport const AuthHeader = 'x-auth-xpub';\n// AuthAccessKey is the header to use for access key authentication (access public key)\nexport const AuthAccessKey = 'x-auth-key';\n// AuthSignature is the given signature (body + timestamp)\nexport const AuthSignature = 'x-auth-signature';\n// AuthHeaderHash hash of the body coming from the request\nexport const AuthHeaderHash = 'x-auth-hash';\n// AuthHeaderNonce random nonce for the request\nexport const AuthHeaderNonce = 'x-auth-nonce';\n// AuthHeaderTime the time of the request, only valid for 30 seconds\nexport const AuthHeaderTime = 'x-auth-time';\nexport const setSignature = function (headers, signingKey, bodyString) {\n    // Create the signature\n    const authData = createSignature(signingKey, bodyString);\n    // Set the auth header\n    if (authData.xPub) {\n        headers[AuthHeader] = authData.xPub;\n    }\n    else if (authData.accessKey) {\n        headers[AuthAccessKey] = authData.accessKey;\n    }\n    return setSignatureHeaders(headers, authData);\n};\nconst setSignatureHeaders = function (headers, authData) {\n    // Create the auth header hash\n    if (authData.AuthHash) {\n        headers[AuthHeaderHash] = authData.AuthHash;\n    }\n    // Set the nonce\n    if (authData.AuthNonce) {\n        headers[AuthHeaderNonce] = authData.AuthNonce;\n    }\n    // Set the time\n    if (authData.AuthTime) {\n        headers[AuthHeaderTime] = authData.AuthTime.toString();\n    }\n    // Set the signature\n    if (authData.Signature) {\n        headers[AuthSignature] = authData.Signature;\n    }\n    return headers;\n};\nexport const createSignature = function (signingKey, bodyString) {\n    const payload = {};\n    // x-auth-nonce is a random unique string to seed the signing message\n    // this can be checked server side to make sure the request is not being replayed\n    payload.AuthNonce = RandomHex(32);\n    let privateKey;\n    if (isHDWallet(signingKey)) {\n        // Get the xPub\n        payload.xPub = signingKey.toPublic().toString();\n        payload.accessKey = undefined;\n        // Derive the address for signing\n        const hdWallet = deriveHDChildKeyFromHex(signingKey, payload.AuthNonce);\n        privateKey = hdWallet.privKey;\n    }\n    else {\n        privateKey = signingKey;\n        payload.xPub = undefined;\n        payload.accessKey = privateKey.toPublicKey().toString();\n    }\n    return createSignatureCommon(payload, bodyString, privateKey);\n};\nconst createSignatureCommon = function (payload, bodyString, privateKey) {\n    // Create the auth header hash\n    payload.AuthHash = ToHash(bodyString);\n    // x-auth-time is the current time and makes sure a request can not be sent after 30 secs\n    payload.AuthTime = +new Date();\n    let key = payload.xPub;\n    if (!key && payload.accessKey) {\n        key = payload.accessKey;\n    }\n    // Signature, using bitcoin signMessage\n    const message = getSigningMessage(key || '', payload);\n    payload.Signature = signMessage(message, privateKey);\n    return payload;\n};\n// getSigningMessage will build the signing message string\nexport const getSigningMessage = function (xPub, auth) {\n    return `${xPub}${auth.AuthHash}${auth.AuthNonce}${auth.AuthTime}`;\n};\nconst isHDWallet = (key) => {\n    return key != null && key instanceof HD;\n};\n","import { __awaiter } from \"tslib\";\nimport { HD } from '@bsv/sdk';\nimport { AuthHeader, setSignature } from './authentication';\nimport { ErrorNoAdminKey, ErrorResponse } from './errors';\nexport class HttpClient {\n    constructor(logger, url, key, adminKey) {\n        if (key != null) {\n            if (typeof key === 'string') {\n                //only xPub can be a string\n                this.xPubString = key;\n            }\n            else {\n                this.signingKey = key;\n            }\n        }\n        if (adminKey) {\n            this.adminKey = new HD().fromString(adminKey);\n        }\n        this.logger = logger;\n        this.baseUrl = url.endsWith('/') ? url : url + '/'; //make sure the url ends with a '/'\n    }\n    adminRequest(path_1) {\n        return __awaiter(this, arguments, void 0, function* (path, method = 'GET', payload = null) {\n            if (!this.hasAdminKey()) {\n                throw new ErrorNoAdminKey();\n            }\n            this.logger.debug('Making request as admin on', method, path);\n            return this.makeRequest(path, method, payload, this.adminKey);\n        });\n    }\n    request(path_1) {\n        return __awaiter(this, arguments, void 0, function* (path, method = 'GET', payload = null) {\n            this.logger.debug('Making request on', method, path);\n            return this.makeRequest(path, method, payload, this.signingKey);\n        });\n    }\n    hasAdminKey() {\n        return this.adminKey != null;\n    }\n    makeRequest(path, method, payload, currentSigningKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = payload ? JSON.stringify(payload) : null;\n            let headers = { 'content-type': 'application/json' };\n            if (currentSigningKey != null) {\n                headers = setSignature(headers, currentSigningKey, json || '');\n            }\n            else if (this.xPubString) {\n                headers[AuthHeader] = this.xPubString;\n            }\n            const res = yield globalThis.fetch(this.prepareUrl(path), {\n                method,\n                headers,\n                body: json,\n            });\n            if (res.ok) {\n                const contentType = res.headers.get('Content-Type');\n                if (contentType && contentType.includes('application/json')) {\n                    return res.json();\n                }\n                return res.text();\n            }\n            else {\n                const rawContent = yield res.text();\n                throw new ErrorResponse(this.logger, res, rawContent);\n            }\n        });\n    }\n    prepareUrl(path) {\n        path = path.startsWith('/') ? path.substring(1) : path;\n        return this.baseUrl + path;\n    }\n}\n","import { HD, PublicKey, TOTP, Utils } from '@bsv/sdk';\nexport const DEFAULT_TOTP_PERIOD = 30;\nexport const DEFAULT_TOTP_DIGITS = 2;\n/*\nBasic flow:\nAlice generates passcodeForBob with (sharedSecret+(contact.Paymail as bobPaymail))\nAlice sends passcodeForBob to Bob (e.g. via email)\nBob validates passcodeForBob with (sharedSecret+(requesterPaymail as bobPaymail))\nThe (sharedSecret+paymail) is a \"directedSecret\". This ensures that passcodeForBob-from-Alice != passcodeForAlice-from-Bob.\nThe flow looks the same for Bob generating passcodeForAlice.\n*/\n/**\n * Generates a TOTP for a given contact\n *\n * @param clientXPriv - The client xpriv\n * @param contact - The Contact\n * @param period - The TOTP period (default: 30)\n * @param digits - The number of TOTP digits (default: 2)\n * @returns The generated TOTP as a string\n */\nexport const generateTotpForContact = (clientXPriv, contact, period = DEFAULT_TOTP_PERIOD, digits = DEFAULT_TOTP_DIGITS) => {\n    const sharedSecret = makeSharedSecret(contact, clientXPriv);\n    let secret = directedSecret(sharedSecret, contact.paymail);\n    return TOTP.generate(secret, getTotpOps(period, digits));\n};\n/**\n * Validates a TOTP for a given contact\n *\n * @param clientXPriv - The client xpriv\n * @param contact - The Contact\n * @param passcode - The TOTP passcode to validate\n * @param requesterPaymail - The paymail of the requester\n * @param period - The TOTP period (default: 30)\n * @param digits - The number of TOTP digits (default: 2)\n * @returns A boolean indicating whether the TOTP is valid\n */\nexport const validateTotpForContact = (clientXPriv, contact, passcode, requesterPaymail, period = DEFAULT_TOTP_PERIOD, digits = DEFAULT_TOTP_DIGITS) => {\n    const sharedSecret = makeSharedSecret(contact, clientXPriv);\n    const secret = directedSecret(sharedSecret, requesterPaymail);\n    return TOTP.validate(secret, passcode, getTotpOps(period, digits));\n};\nconst getTotpOps = (period, digits) => ({\n    digits,\n    period,\n    algorithm: 'SHA-1',\n});\nconst makeSharedSecret = (contact, clientXPriv) => {\n    const xprivKey = new HD().fromString(clientXPriv.toString());\n    const pubKey = PublicKey.fromString(contact.pubKey);\n    // PKI derivation path: m/0/0/0\n    // NOTICE: we currently do not support PKI rotation; however, adjustments will be made if and when we decide to implement it\n    const hd = xprivKey.derive('m/0/0/0');\n    const privKey = hd.privKey;\n    const ss = privKey.deriveSharedSecret(pubKey);\n    return ss.getX().toHex(32);\n};\nconst directedSecret = (sharedSecret, paymail) => {\n    const sharedSecretDigest = Utils.toArray(sharedSecret, 'hex');\n    const paymailDigest = Utils.toArray(paymail, 'utf8');\n    const concatenated = [...sharedSecretDigest, ...paymailDigest];\n    return concatenated;\n};\n","import { __awaiter } from \"tslib\";\nimport { defaultLogger, makeLogger } from './logger';\nimport { HttpClient } from './httpclient';\nimport { ErrorInvalidOptions, ErrorNoXPrivToGenerateTOTP, ErrorNoXPrivToSignTransaction, ErrorNoXPrivToValidateTOTP, ErrorTxIdsDontMatchToDraft, ErrorWrongTOTP, } from './errors';\nimport { HD, P2PKH, PrivateKey, Transaction } from '@bsv/sdk';\nimport { validateTotpForContact, generateTotpForContact, DEFAULT_TOTP_DIGITS, DEFAULT_TOTP_PERIOD } from './totp';\n/**\n * SpvWallet class\n *\n * @constructor\n * @example\n * const SpvWalletClient = new SpvWalletClient(<serverUrl>, {\n *   xPriv: <xpriv...>\n * })\n */\nexport class SpvWalletClient {\n    constructor(serverUrl, options, loggerConfig = defaultLogger) {\n        this.logger = makeLogger(loggerConfig);\n        this.http = this.makeRequester(options, serverUrl);\n    }\n    get xPrivKey() {\n        return this.xPriv;\n    }\n    makeRequester(options, serverUrl) {\n        if (options.adminKey) {\n            this.logger.info('Using adminKey to sign admin requests');\n        }\n        if ('xPub' in options) {\n            this.logger.info('Using XPub. SendToRecipients function will not be available.');\n            return new HttpClient(this.logger, serverUrl, options.xPub, options.adminKey);\n        }\n        if ('xPriv' in options) {\n            this.logger.info('Using xPriv to sign requests');\n            this.xPriv = new HD().fromString(options.xPriv);\n            return new HttpClient(this.logger, serverUrl, this.xPriv, options.adminKey);\n        }\n        if ('accessKey' in options) {\n            this.logger.info('Using accessKey to sign requests. SendToRecipients will not be available.');\n            const signingKey = PrivateKey.fromString(options.accessKey, 'hex');\n            return new HttpClient(this.logger, serverUrl, signingKey, options.adminKey);\n        }\n        if (options.adminKey != null) {\n            this.logger.warn('Non-admin requests will not work because xPub, xPriv nor accessKey is provided.');\n            return new HttpClient(this.logger, serverUrl, undefined, options.adminKey);\n        }\n        throw new ErrorInvalidOptions(this.logger, options);\n    }\n    /**\n     * Admin only: Return whether the admin key is valid on the server\n     *\n     * @return {boolean}\n     */\n    AdminGetStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/status`);\n        });\n    }\n    /**\n     * Admin only: Get stats about the SPV Wallet server\n     *\n     * @return {AdminStats}\n     */\n    AdminGetStats() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/stats`);\n        });\n    }\n    /**\n     * Admin only: Get a list of all access keys in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {AdminAccessKeyFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {AccessKeys}\n     */\n    AdminGetAccessKeys(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/access-keys/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all access keys in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {AdminAccessKeyFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetAccessKeysCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/access-keys/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a list of all contacts in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {ContactFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {Contacts}\n     */\n    AdminGetContacts(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/contact/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Update contact fullName and metadata\n     *\n     * @param {string} id              Contact ID to update\n     * @param {string} fullName        New full name of the contact\n     * @param {Metadata} metadata      Key value object to use to filter the documents by the metadata\n     * @constructor\n     */\n    AdminUpdateContact(id, fullName, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/contact/${id}`, 'PATCH', { fullName, metadata });\n        });\n    }\n    /**\n     * Admin only: Delete a contact\n     *\n     * @param {string} id Contact ID to delete\n     * @return void\n     */\n    AdminDeleteContact(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.http.adminRequest(`admin/contact/${id}`, 'DELETE', {});\n        });\n    }\n    /**\n     * Admin only: Accept a contact request\n     *\n     * @param {string} id Contact ID to accept\n     * @return {Contact}\n     */\n    AdminAcceptContact(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/contact/accepted/${id}`, 'PATCH', {});\n        });\n    }\n    /**\n     * Admin only: Reject a contact request\n     *\n     * @param {string} id Contact ID to reject\n     * @return {Contact}\n     */\n    AdminRejectContact(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/contact/rejected/${id}`, 'PATCH', {});\n        });\n    }\n    /**\n     * Admin only: Get a list of all destinations in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {DestinationFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {Destinations}\n     */\n    AdminGetDestinations(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/destinations/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all destinations in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {DestinationFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetDestinationsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/destinations/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a paymail by address\n     *\n     * @param address string Paymail address (i.e. alias@example.com)\n     * @return {PaymailAddress}\n     */\n    AdminGetPaymail(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/paymail/get`, 'POST', { address });\n        });\n    }\n    /**\n     * Admin only: Get a list of all paymails in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {AdminPaymailFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {PaymailAddresses}\n     */\n    AdminGetPaymails(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/paymails/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all paymails in the system, filtered by conditions, metadata and queryParams\n     * To get a count of not-deleted paymails, use the condition: { deleted_at: null }\n     *\n     * @param {AdminPaymailFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetPaymailsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/paymails/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Create a new paymail for an xPub\n     *\n     * @param {string} rawXPub Raw xPub to register the paymail to\n     * @param {string} address Paymail address (i.e. alias@example.com)\n     * @param {string} public_name Public name for the user to return in Paymail address resolution requests\n     * @param {string} avatar Avatar of the user to return in Paymail address resolution requests\n     * @return {PaymailAddress}\n     */\n    AdminCreatePaymail(rawXPub, address, public_name, avatar) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/paymail/create`, 'POST', {\n                key: rawXPub,\n                address,\n                public_name,\n                avatar,\n            });\n        });\n    }\n    /**\n     * Admin only: Delete a paymail\n     *\n     * @param address string Paymail address (ie. example@spv-wallet.org)\n     * @return void\n     */\n    AdminDeletePaymail(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.http.adminRequest(`admin/paymail/delete`, 'DELETE', { address });\n        });\n    }\n    /**\n     * Admin only: Get a list of all transactions in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {TransactionFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {Txs}\n     */\n    AdminGetTransactions(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/transactions/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all transactions in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {TransactionFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetTransactionsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/transactions/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a list of all utxos in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {AdminUtxoFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {Utxos}\n     */\n    AdminGetUtxos(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/utxos/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all utxos in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {AdminUtxoFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetUtxosCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/utxos/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a list of all xpubs in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {XpubFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} params Database query parameters for page, page size and sorting\n     * @return {XPubs}\n     */\n    AdminGetXPubs(conditions, metadata, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/xpubs/search`, 'POST', {\n                conditions,\n                metadata,\n                params,\n            });\n        });\n    }\n    /**\n     * Admin only: Get a count of all xpubs in the system, filtered by conditions, metadata and queryParams\n     *\n     * @param {XpubFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    AdminGetXPubsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/xpubs/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Register a new xPub into the SPV Wallet\n     *\n     * @param {string} rawXPub    XPub string\n     * @param {Metadata} metadata Key value object to use to add to the xpub\n     * @return {XPub}             The newly registered xpub\n     */\n    AdminNewXpub(rawXPub, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/xpub`, 'POST', {\n                key: rawXPub,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Admin only: Record a transaction without any of the normal checks\n     *\n     * @param {string} hex  Hex string of the transaction\n     * @return {Tx}\n     */\n    AdminRecordTransaction(hex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.adminRequest(`admin/transactions/record`, 'POST', { hex });\n        });\n    }\n    /**\n     * Get information about the xpub from the server of the current user\n     *\n     * @return {XPub}\n     */\n    GetXPub() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`xpub`);\n        });\n    }\n    /**\n     * Update the metadata of the xpub of the current user\n     *\n     * Admin key should be set to use this method\n     *\n     * @param {Metadata} metadata Key value object to use to update the metadata. To delete keys add a key with null value\n     * @return {XPub}\n     */\n    UpdateXPubMetadata(metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`xpub`, 'PATCH', { metadata });\n        });\n    }\n    /**\n     * Get an access key by ID\n     *\n     * @param {string} id The database ID of the access key\n     * @return {AccessKey}\n     */\n    GetAccessKey(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`access-key?id=${id}`);\n        });\n    }\n    /**\n     * Get a list of all access keys for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {AccessKeyFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} queryParams Database query parameters for page, page size and sorting\n     * @return {AccessKeys}\n     */\n    GetAccessKeys(conditions, metadata, queryParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`access-key/search`, 'POST', {\n                conditions,\n                metadata,\n                page: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) || 0,\n                page_size: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page_size) || 0,\n                order_by_field: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.order_by_field) || '',\n                sort_direction: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.sort_direction) || '',\n            });\n        });\n    }\n    /**\n     * Get a count of all access keys for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {AccessKeyFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    GetAccessKeysCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`access-key/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Create a new access key, with the (optional) metadata\n     *\n     * This method returns the newly created access key, with the private key, which is only given out this once\n     *\n     * @param metadata Metadata Metadata to add to the new access key\n     * @return {AccessKey}\n     */\n    CreateAccessKey(metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`access-key`, 'POST', { metadata });\n        });\n    }\n    /**\n     * Revoke an access key and invalidate in the database\n     *\n     * After this function is successfully called, the access key cannot be used anymore on an SPV Wallet server\n     *\n     * @param id string The database ID of the access key to revoke\n     * @return {AccessKey}\n     */\n    RevokeAccessKey(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`access-key?id=${id}`, 'DELETE');\n        });\n    }\n    /**\n     * Get a destination of the current user by database ID\n     *\n     * @param id string Database ID of destination (sha256 hash of locking script)\n     * @return {Destination}\n     */\n    GetDestinationByID(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination?id=${id}`);\n        });\n    }\n    /**\n     * Get a destination of the current user by locking script\n     *\n     * @param locking_script string Locking script (script pub key)\n     * @return {Destination}\n     */\n    GetDestinationByLockingScript(locking_script) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination?locking_script=${locking_script}`);\n        });\n    }\n    /**\n     * Get a destination of the current user by bitcoin address\n     *\n     * @param address string Bitcoin address\n     * @return {Destination}\n     */\n    GetDestinationByAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination?address=${address}`);\n        });\n    }\n    /**\n     * Get a list of all destinations for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {DestinationFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} queryParams Database query parameters for page, page size and sorting\n     * @return {Destinations}\n     */\n    GetDestinations(conditions, metadata, queryParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination/search`, 'POST', {\n                conditions,\n                metadata,\n                page: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) || 0,\n                page_size: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page_size) || 0,\n                order_by_field: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.order_by_field) || '',\n                sort_direction: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.sort_direction) || '',\n            });\n        });\n    }\n    /**\n     * Get a count of all destinations for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {DestinationFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    GetDestinationsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Create a new destination to receive bsv with and return that destination\n     *\n     * This function allows you to create a destination that will be monitored on-chain and will import any transactions\n     * related to that destination into SPV Wallet. This is legacy functionality in Bitcoin and should only be used if a p2p\n     * option (paymail) is not possible. Use sparingly.\n     *\n     * @param {Metadata} metadata Key value object to attach to the new destination\n     * @return {Destination}\n     */\n    NewDestination(metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination`, 'POST', { metadata });\n        });\n    }\n    /**\n     * Updated the metadata object of the destination given by ID with new keys (does not overwrite the old object)\n     *\n     * To remove a key from the metadata object, add a key to set with a value of `null`\n     *\n     * @param {string} id Database ID of the destination\n     * @param {Metadata} metadata Key value object to append to the metadata of the destination\n     * @return {Destination}\n     */\n    UpdateDestinationMetadataByID(id, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination`, 'PATCH', {\n                id,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Updated the metadata object of the destination given by locking script with new keys (does not overwrite the old object)\n     *\n     * To remove a key from the metadata object, add a key to set with a value of `null`\n     *\n     * @param {string} locking_script Locking script of the destination\n     * @param {Metadata} metadata Key value object to append to the metadata of the destination\n     * @return {Destination}\n     */\n    UpdateDestinationMetadataByLockingScript(locking_script, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination`, 'PATCH', {\n                locking_script,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Updated the metadata object of the destination given by address with new keys (does not overwrite the old object)\n     *\n     * To remove a key from the metadata object, add a key to set with a value of `null`\n     *\n     * @param {string} address Address of the destination\n     * @param {Metadata} metadata Key value object to append to the metadata of the destination\n     * @return {Destination}\n     */\n    UpdateDestinationMetadataByAddress(address, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`destination`, 'PATCH', {\n                address,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Get a list of all contacts for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {ContactFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} queryParams Database query parameters for page, page size and sorting\n     * @return {Contacts}\n     */\n    GetContacts(conditions, metadata, queryParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`contact/search`, 'POST', {\n                conditions,\n                metadata,\n                page: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) || 0,\n                page_size: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page_size) || 0,\n                order_by_field: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.order_by_field) || '',\n                sort_direction: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.sort_direction) || '',\n            });\n        });\n    }\n    /**\n     * Upsert will add a new contact or modify an existing one.\n     *\n     * @param {string} paymail            Contact paymail to add or modify\n     * @param {string} fullName           Full name of the contact which could be shown instead of whole paymail address.\n     * @param {string} requesterPaymail   Paymail of the requester\n     * @param {Metadata} metadata         Key value object to use to filter the documents by the metadata\n     * @return {Contact}\n     */\n    UpsertContact(paymail, fullName, requesterPaymail, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let payload = { fullName, requesterPaymail, metadata };\n            if (requesterPaymail !== '') {\n                payload['requesterPaymail'] = requesterPaymail;\n            }\n            return yield this.http.request(`contact/${paymail}`, 'PUT', payload);\n        });\n    }\n    /**\n     * Accept a contact request\n     *\n     * @param {string} paymail Contact paymail to modify\n     * @return {void}\n     */\n    AcceptContact(paymail) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`contact/accepted/${paymail}`, 'PATCH');\n        });\n    }\n    /**\n     * Reject a contact request\n     *\n     * @param {string} paymail Contact paymail to modify\n     * @return {void}\n     */\n    RejectContact(paymail) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`contact/rejected/${paymail}`, 'PATCH');\n        });\n    }\n    /**\n     * Confirm a contact request\n     *\n     * @param {string} passcode - The passcode for the contact\n     * @param contact\n     * @param {string} paymail Contact paymail\n     * @param {number} period - The period for the TOTP\n     * @param {number} digits - The number of digits for the TOTP\n     * @returns {Promise<void>}\n     * @throws {ErrorWrongTOTP} If the TOTP is invalid\n     * @throws {ErrorNoXPrivToValidateTOTP} If the xPriv is not set\n     */\n    ConfirmContact(passcode, contact, paymail, period, digits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isTotpValid = this.ValidateTotpForContact(contact, passcode, paymail, period, digits);\n            if (!isTotpValid) {\n                throw new ErrorWrongTOTP();\n            }\n            return yield this.http.request(`contact/confirmed/${paymail}`, 'PATCH');\n        });\n    }\n    /**\n     * Get all details of the transaction by the given ID\n     *\n     * @param {string} txID Transaction ID\n     * @return {Tx}\n     */\n    GetTransaction(txID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction?id=${txID}`, 'GET');\n        });\n    }\n    /**\n     * Get a list of all transactions for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {TransactionFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} queryParams Database query parameters for page, page size and sorting\n     * @return {Txs}\n     */\n    GetTransactions(conditions, metadata, queryParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction/search`, 'POST', {\n                conditions,\n                metadata,\n                page: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) || 0,\n                page_size: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page_size) || 0,\n                order_by_field: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.order_by_field) || '',\n                sort_direction: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.sort_direction) || '',\n            });\n        });\n    }\n    /**\n     * Get a count of all transactions for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {TransactionFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    GetTransactionsCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Get all details of the utxo by the given ID\n     *\n     * @param {string} tx_id Transaction ID of the UTXO\n     * @param {number} output_index Index of output within the transaction of the UTXO\n     * @return {Utxo}\n     */\n    GetUtxo(tx_id, output_index) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`utxo?tx_id=${tx_id}&output_index=${output_index}`);\n        });\n    }\n    /**\n     * Get a list of all utxos for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {UtxoFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @param {QueryParams} queryParams Database query parameters for page, page size and sorting\n     * @return {Utxos}\n     */\n    GetUtxos(conditions, metadata, queryParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`utxo/search`, 'POST', {\n                conditions,\n                metadata,\n                page: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) || 0,\n                page_size: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.page_size) || 0,\n                order_by_field: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.order_by_field) || '',\n                sort_direction: (queryParams === null || queryParams === void 0 ? void 0 : queryParams.sort_direction) || '',\n            });\n        });\n    }\n    /**\n     * Get a count of all utxos for the current user, filtered by conditions, metadata and queryParams\n     *\n     * @param {UtxoFilter} conditions   Key value object to use to filter the documents\n     * @param {Metadata} metadata       Key value object to use to filter the documents by the metadata\n     * @return {number}\n     */\n    GetUtxosCount(conditions, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`utxo/count`, 'POST', {\n                conditions,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Create a draft transaction to the recipients given\n     *\n     * This is a helper function to easily create a new draft transaction to a list of recipients\n     *\n     * @see {@link SendToRecipients}\n     * @param {Recipients} recipients A list of recipients and a satoshi value to send to them\n     * @param {Metadata} metadata     Key value object to use to add to the draft transaction\n     * @return {DraftTx}     Complete draft transaction object from SPV Wallet, all configuration options filled in\n     */\n    DraftToRecipients(recipients, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const transactionConfig = {\n                outputs: recipients,\n            };\n            return yield this.http.request(`transaction`, 'POST', {\n                config: transactionConfig,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Create a draft transaction using the given transaction config\n     *\n     * @param {TransactionConfigInput} transactionConfig Configuration of the new transaction\n     * @param {Metadata} metadata                        Key value object to use to add to the draft transaction\n     * @return {DraftTx}                        Complete draft transaction object from SPV Wallet, all configuration options filled in\n     */\n    DraftTransaction(transactionConfig, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction`, 'POST', {\n                config: transactionConfig,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Helper function to create a draft, sign it and send it to a list of recipients\n     *\n     * @param {Recipients} recipients A list of recipients and a satoshi value to send to them\n     * @param {Metadata} metadata     Key value object to use to add to the (draft) transaction\n     * @return {Tx}          The final transaction object, including the hex of the Bitcoin transaction\n     * @example\n     * // This function is a shorthand for:\n     * const draft = await spvWalletClient.DraftToRecipients(recipients, metadata);\n     * const finalized = await spvWalletClient.SignTransaction(draft);\n     * const tx = await spvWalletClient.RecordTransaction(finalized, draft.id, metadata)\n     */\n    SendToRecipients(recipients, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const draft = yield this.DraftToRecipients(recipients, metadata);\n            const finalized = yield this.SignTransaction(draft);\n            return this.RecordTransaction(finalized, draft.id, metadata);\n        });\n    }\n    /**\n     * Finalize and sign the given draft transaction\n     *\n     * @param {DraftTx} draftTransaction Draft transaction object\n     * @return {string} Final transaction hex\n     */\n    SignTransaction(draftTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!this.xPriv) {\n                throw new ErrorNoXPrivToSignTransaction();\n            }\n            const xPriv = this.xPriv;\n            const txDraft = Transaction.fromHex(draftTransaction.hex);\n            (_a = draftTransaction.configuration.inputs) === null || _a === void 0 ? void 0 : _a.forEach((input, index) => {\n                const { destination } = input;\n                if (destination == null) {\n                    throw new Error('Unexpected input that does not contain destination which is required for signing');\n                }\n                // derive private key (m/chain/num)\n                let hdWallet = xPriv.deriveChild(destination.chain).deriveChild(destination.num);\n                if (destination.paymail_external_derivation_num != null) {\n                    // derive private key (m/chain/num/paymail_num)\n                    hdWallet = hdWallet.deriveChild(destination.paymail_external_derivation_num);\n                }\n                // small sanity check for the inputs\n                if (input.transaction_id != txDraft.inputs[index].sourceTXID ||\n                    input.output_index != txDraft.inputs[index].sourceOutputIndex) {\n                    throw new ErrorTxIdsDontMatchToDraft(this.logger, input, index, txDraft.inputs[index]);\n                }\n                txDraft.inputs[index].unlockingScriptTemplate = new P2PKH().unlock(hdWallet.privKey, 'single', false, input.satoshis, new P2PKH().lock(destination.address));\n                txDraft.inputs[index].sourceOutputIndex = input.output_index;\n                txDraft.inputs[index].sourceTXID = input.transaction_id;\n            });\n            yield txDraft.sign();\n            return txDraft.toHex();\n        });\n    }\n    /**\n     * Record a Bitcoin transaction (in hex) into SPV Wallet\n     *\n     * This will only work of an input or output of the transaction can be related to an SPV Wallet user. SPV Wallet does not record\n     * unrelated transaction into its database.\n     *\n     * @param {string} hex         Hex string of the Bitcoin transaction\n     * @param {string} referenceID Optional reference ID (draft transaction ID)\n     * @param {Metadata} metadata  Key value object to use to add to the transaction\n     * @return {Tx}       The SPV Wallet transaction object\n     */\n    RecordTransaction(hex, referenceID, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction/record`, 'POST', {\n                hex,\n                reference_id: referenceID,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Updated the metadata object of the transaction given by txID with new keys (does not overwrite the old object)\n     *\n     * To remove a key from the metadata object, add a key to set with a value of `null`\n     *\n     * @param {string} txID       The ID of the transaction\n     * @param {Metadata} metadata Key value object to use to add to the transaction\n     * @return {Tx}      The complete SPV Wallet transaction object, with the new changes\n     */\n    UpdateTransactionMetadata(txID, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.http.request(`transaction`, 'PATCH', {\n                id: txID,\n                metadata,\n            });\n        });\n    }\n    /**\n     * Retrieves the shared configuration from the server.\n     * @returns {SharedConfig} A promise that resolves to the shared configuration.\n     */\n    GetSharedConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.http.hasAdminKey()) {\n                return yield this.http.adminRequest(`shared-config`, 'GET');\n            }\n            return yield this.http.request(`shared-config`, 'GET');\n        });\n    }\n    /**\n     * Generates a TOTP for a given contact\n     *\n     * @param contact - The Contact\n     * @param period - The TOTP period (default: 30)\n     * @param digits - The number of TOTP digits (default: 2)\n     * @returns The generated TOTP as a string\n     */\n    GenerateTotpForContact(contact, period = DEFAULT_TOTP_PERIOD, digits = DEFAULT_TOTP_DIGITS) {\n        if (!this.xPrivKey) {\n            throw new ErrorNoXPrivToGenerateTOTP();\n        }\n        return generateTotpForContact(this.xPrivKey, contact, period, digits);\n    }\n    /**\n     * Validates a TOTP for a given contact\n     *\n     * @param passcode - The TOTP passcode to validate\n     * @param requesterPaymail - The paymail of the requester\n     * @param period - The TOTP period (default: 30)\n     * @param digits - The number of TOTP digits (default: 2)\n     * @returns A boolean indicating whether the TOTP is valid\n     * @throws {ErrorNoXPrivToValidateTOTP} If the xPrivKey is not set\n     */\n    ValidateTotpForContact(contact, passcode, requesterPaymail, period = DEFAULT_TOTP_PERIOD, digits = DEFAULT_TOTP_DIGITS) {\n        if (!this.xPrivKey) {\n            throw new ErrorNoXPrivToValidateTOTP();\n        }\n        return validateTotpForContact(this.xPrivKey, contact, passcode, requesterPaymail, period, digits);\n    }\n}\n"],"names":["Utils","Random","Hash","Mnemonic","HD","BSM","BigNumber","ECDSA","__awaiter","TOTP","PublicKey","PrivateKey","Transaction","P2PKH"],"mappings":"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"}